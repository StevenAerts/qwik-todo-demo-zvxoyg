"use strict";
/**
 * @license
 * Copyright BuilderIO All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/BuilderIO/qwik/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TodoEntity = void 0;
const qwik_1 = require("../qwik");
const Item_js_1 = require("./Item.js");
class TodoEntity extends qwik_1.Entity {
    constructor() {
        super(...arguments);
        this.filteredItems = [];
    }
    async archive() {
        return this.$invokeQRL(qwik_1.QRL `data:/Todo_archive`);
    }
    async newItem(text) {
        return this.$invokeQRL(qwik_1.QRL `data:/Todo_newItem`, text);
    }
    remove(itemKey) {
        return this.$invokeQRL(qwik_1.QRL `data:/Todo_removeItem`, itemKey);
    }
    async setFilter(filter) {
        const injector = qwik_1.getInjector(this.$element);
        const itemStatePromises = this.$state.items.map((itemKey) => injector.getEntityState(itemKey));
        const items = await Promise.all(itemStatePromises);
        this.filteredItems = items
            .filter({
            all: () => true,
            active: (item) => !item.completed,
            completed: (item) => item.completed,
        }[filter])
            .map(qwik_1.entityStateKey); // TODO(type): fix cast
        this.$state.filter = filter;
        qwik_1.markDirty(this);
    }
    async $init() {
        this.filteredItems = this.$state.items;
    }
    async $newState() {
        const host = this.$element;
        return {
            completed: 0,
            filter: 'all',
            nextId: 4,
            items: [
                Item_js_1.ItemEntity.$hydrate(host, { id: '1' }, { completed: false, title: 'Read Qwik docs' }).$key,
                Item_js_1.ItemEntity.$hydrate(host, { id: '2' }, { completed: false, title: 'Build HelloWorld' }).$key,
                Item_js_1.ItemEntity.$hydrate(host, { id: '3' }, { completed: false, title: 'Profit' }).$key,
            ],
        };
    }
}
exports.TodoEntity = TodoEntity;
TodoEntity.$qrl = qwik_1.QRL `data:/Todo#TodoEntity`;
TodoEntity.$type = 'Todos';
TodoEntity.$keyProps = ['todos'];
TodoEntity.MOCK_USER = qwik_1.toEntityKey('todos:1234');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9kby5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsic3JjL2RhdGEvVG9kby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCxrQ0FRaUI7QUFDakIsdUNBQTZDO0FBVzdDLE1BQWEsVUFBVyxTQUFRLGFBQXVCO0lBQXZEOztRQU1FLGtCQUFhLEdBQTRCLEVBQUUsQ0FBQztJQW9FOUMsQ0FBQztJQWxFQyxLQUFLLENBQUMsT0FBTztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFHLENBQVksb0JBQW9CLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FDcEIsVUFBRyxDQUF1QyxvQkFBb0IsRUFDOUQsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQThCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FDcEIsVUFBRyxDQUErQyx1QkFBdUIsRUFDekUsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFzQztRQUNwRCxNQUFNLFFBQVEsR0FBRyxrQkFBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQzFELFFBQVEsQ0FBQyxjQUFjLENBQWEsT0FBTyxDQUFDLENBQzdDLENBQUM7UUFDRixNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUs7YUFDdkIsTUFBTSxDQUNMO1lBQ0UsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUk7WUFDZixNQUFNLEVBQUUsQ0FBQyxJQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFDdkMsU0FBUyxFQUFFLENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUztTQUMxQyxDQUFDLE1BQU0sQ0FBQyxDQUNWO2FBQ0EsR0FBRyxDQUFDLHFCQUE2QyxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7UUFDOUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQzVCLGdCQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUN6QyxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVM7UUFDYixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzNCLE9BQU87WUFDTCxTQUFTLEVBQUUsQ0FBQztZQUNaLE1BQU0sRUFBRSxLQUFLO1lBQ2IsTUFBTSxFQUFFLENBQUM7WUFDVCxLQUFLLEVBQUU7Z0JBQ0wsb0JBQVUsQ0FBQyxRQUFRLENBQ2pCLElBQUksRUFDSixFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFDWCxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLENBQzlDLENBQUMsSUFBSTtnQkFDTixvQkFBVSxDQUFDLFFBQVEsQ0FDakIsSUFBSSxFQUNKLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUNYLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsQ0FDaEQsQ0FBQyxJQUFJO2dCQUNOLG9CQUFVLENBQUMsUUFBUSxDQUNqQixJQUFJLEVBQ0osRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQ1gsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FDdEMsQ0FBQyxJQUFJO2FBQ1A7U0FDRixDQUFDO0lBQ0osQ0FBQzs7QUF6RUgsZ0NBMEVDO0FBekVRLGVBQUksR0FBRyxVQUFHLENBQVksdUJBQXVCLENBQUM7QUFDOUMsZ0JBQUssR0FBRyxPQUFPLENBQUM7QUFDaEIsb0JBQVMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RCLG9CQUFTLEdBQUcsa0JBQVcsQ0FBYSxZQUFZLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBCdWlsZGVySU8gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vQnVpbGRlcklPL3F3aWsvYmxvYi9tYWluL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQge1xuICBtYXJrRGlydHksXG4gIFFSTCxcbiAgRW50aXR5LFxuICBnZXRJbmplY3RvcixcbiAgRW50aXR5S2V5LFxuICBlbnRpdHlTdGF0ZUtleSxcbiAgdG9FbnRpdHlLZXksXG59IGZyb20gJy4uL3F3aWsnO1xuaW1wb3J0IHsgSXRlbSwgSXRlbUVudGl0eSB9IGZyb20gJy4vSXRlbS5qcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9kb1Byb3BzIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9kbyB7XG4gIGNvbXBsZXRlZDogbnVtYmVyO1xuICBmaWx0ZXI6ICdhY3RpdmUnIHwgJ2FsbCcgfCAnY29tcGxldGVkJztcbiAgaXRlbXM6IEVudGl0eUtleTxJdGVtRW50aXR5PltdO1xuICBuZXh0SWQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFRvZG9FbnRpdHkgZXh0ZW5kcyBFbnRpdHk8VG9kb1Byb3BzLCBUb2RvPiB7XG4gIHN0YXRpYyAkcXJsID0gUVJMPEl0ZW1FbnRpdHk+YGRhdGE6L1RvZG8jVG9kb0VudGl0eWA7XG4gIHN0YXRpYyAkdHlwZSA9ICdUb2Rvcyc7XG4gIHN0YXRpYyAka2V5UHJvcHMgPSBbJ3RvZG9zJ107XG4gIHN0YXRpYyBNT0NLX1VTRVIgPSB0b0VudGl0eUtleTxUb2RvRW50aXR5PigndG9kb3M6MTIzNCcpO1xuXG4gIGZpbHRlcmVkSXRlbXM6IEVudGl0eUtleTxJdGVtRW50aXR5PltdID0gW107XG5cbiAgYXN5bmMgYXJjaGl2ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy4kaW52b2tlUVJMKFFSTDwoKSA9PiB2b2lkPmBkYXRhOi9Ub2RvX2FyY2hpdmVgKTtcbiAgfVxuXG4gIGFzeW5jIG5ld0l0ZW0odGV4dDogc3RyaW5nKTogUHJvbWlzZTxJdGVtRW50aXR5PiB7XG4gICAgcmV0dXJuIHRoaXMuJGludm9rZVFSTChcbiAgICAgIFFSTDwodGV4dDogc3RyaW5nKSA9PiBQcm9taXNlPEl0ZW1FbnRpdHk+PmBkYXRhOi9Ub2RvX25ld0l0ZW1gLFxuICAgICAgdGV4dFxuICAgICk7XG4gIH1cblxuICByZW1vdmUoaXRlbUtleTogRW50aXR5S2V5PEl0ZW1FbnRpdHk+KSB7XG4gICAgcmV0dXJuIHRoaXMuJGludm9rZVFSTChcbiAgICAgIFFSTDwoa2V5OiBFbnRpdHlLZXk8SXRlbUVudGl0eT4pID0+IFByb21pc2U8dm9pZD4+YGRhdGE6L1RvZG9fcmVtb3ZlSXRlbWAsXG4gICAgICBpdGVtS2V5XG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHNldEZpbHRlcihmaWx0ZXI6ICdhY3RpdmUnIHwgJ2FsbCcgfCAnY29tcGxldGVkJykge1xuICAgIGNvbnN0IGluamVjdG9yID0gZ2V0SW5qZWN0b3IodGhpcy4kZWxlbWVudCk7XG4gICAgY29uc3QgaXRlbVN0YXRlUHJvbWlzZXMgPSB0aGlzLiRzdGF0ZS5pdGVtcy5tYXAoKGl0ZW1LZXkpID0+XG4gICAgICBpbmplY3Rvci5nZXRFbnRpdHlTdGF0ZTxJdGVtRW50aXR5PihpdGVtS2V5KVxuICAgICk7XG4gICAgY29uc3QgaXRlbXMgPSBhd2FpdCBQcm9taXNlLmFsbChpdGVtU3RhdGVQcm9taXNlcyk7XG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gaXRlbXNcbiAgICAgIC5maWx0ZXIoXG4gICAgICAgIHtcbiAgICAgICAgICBhbGw6ICgpID0+IHRydWUsXG4gICAgICAgICAgYWN0aXZlOiAoaXRlbTogSXRlbSkgPT4gIWl0ZW0uY29tcGxldGVkLFxuICAgICAgICAgIGNvbXBsZXRlZDogKGl0ZW06IEl0ZW0pID0+IGl0ZW0uY29tcGxldGVkLFxuICAgICAgICB9W2ZpbHRlcl1cbiAgICAgIClcbiAgICAgIC5tYXAoZW50aXR5U3RhdGVLZXkgYXMgKCkgPT4gRW50aXR5S2V5PEl0ZW1FbnRpdHk+KTsgLy8gVE9ETyh0eXBlKTogZml4IGNhc3RcbiAgICB0aGlzLiRzdGF0ZS5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbWFya0RpcnR5KHRoaXMpO1xuICB9XG5cbiAgYXN5bmMgJGluaXQoKSB7XG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy4kc3RhdGUuaXRlbXM7XG4gIH1cblxuICBhc3luYyAkbmV3U3RhdGUoKTogUHJvbWlzZTxUb2RvPiB7XG4gICAgY29uc3QgaG9zdCA9IHRoaXMuJGVsZW1lbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBsZXRlZDogMCxcbiAgICAgIGZpbHRlcjogJ2FsbCcsXG4gICAgICBuZXh0SWQ6IDQsXG4gICAgICBpdGVtczogW1xuICAgICAgICBJdGVtRW50aXR5LiRoeWRyYXRlKFxuICAgICAgICAgIGhvc3QsXG4gICAgICAgICAgeyBpZDogJzEnIH0sXG4gICAgICAgICAgeyBjb21wbGV0ZWQ6IGZhbHNlLCB0aXRsZTogJ1JlYWQgUXdpayBkb2NzJyB9XG4gICAgICAgICkuJGtleSxcbiAgICAgICAgSXRlbUVudGl0eS4kaHlkcmF0ZShcbiAgICAgICAgICBob3N0LFxuICAgICAgICAgIHsgaWQ6ICcyJyB9LFxuICAgICAgICAgIHsgY29tcGxldGVkOiBmYWxzZSwgdGl0bGU6ICdCdWlsZCBIZWxsb1dvcmxkJyB9XG4gICAgICAgICkuJGtleSxcbiAgICAgICAgSXRlbUVudGl0eS4kaHlkcmF0ZShcbiAgICAgICAgICBob3N0LFxuICAgICAgICAgIHsgaWQ6ICczJyB9LFxuICAgICAgICAgIHsgY29tcGxldGVkOiBmYWxzZSwgdGl0bGU6ICdQcm9maXQnIH1cbiAgICAgICAgKS4ka2V5LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=